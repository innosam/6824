package mapreduce

import (
	"hash/fnv"
    "io/ioutil"
    "encoding/json"
    "log"
    "os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
    //
    // Problem: drive the map function and split the output to the intermediate files.
    // Pass the content to the map function.
    // Loop the results:
    //   get the file name to store the result.
    //   encode the key, value to JSON dictionary.
    //   write to the file.
    // Note: we can group the result by key.
    //

    contents, err := ioutil.ReadFile(inFile)
    if err != nil {
        log.Println(err)
        os.Exit(1)
    }

    results:= mapF(inFile, string(contents))
    for _, v := range results {
       r := ihash(v.Key) % nReduce
       filename := reduceName(jobName, mapTask, r)
       file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0755)
       if err != nil {
           log.Println(err)
           os.Exit(2)
       }
       enc := json.NewEncoder(file)
       err = enc.Encode(&v)
       if err != nil {
           log.Println(err)
           os.Exit(3)
       }

       if err := file.Close(); err != nil {
        log.Println(err)
        os.Exit(4)
       }
    } 

	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
